{"name": "添加书籍，正确提交", "status": "failed", "statusDetails": {"message": "Failed: 断言失败: 预期[SUCCESS], 实际: [已发布过同名小说！]\nassert '已发布过同名小说！' == 'SUCCESS'\n  \n  - SUCCESS\n  + 已发布过同名小说！", "trace": "self = <test_case.test_case_002.TestCase object at 0x000001A92A7F9A90>\ncase_data = {'id': 21, 'url': 'http://novel.hctestedu.com', 'path': '/author/addBook', 'method': 'post', ...}\n\n    @pytest.mark.parametrize(\"case_data\", CaseData)\n    def testcase(self, case_data: Dict[str, Any]):\n        self.__dynamic_title(case_data)\n        case_data = eval(Template(str(case_data)).render(self.all_dict))\n    \n        test_result = \"Passed\"  # 默认状态\n        error_msg = None\n    \n        try:\n    \n            # 1. 准备请求数据\n            dict_data = self.__prepare_request_data(case_data)\n            print(dict_data)\n            # 2. 发送请求\n            res = getattr(self.ak, case_data[\"method\"])(**dict_data)\n            res_json = res.json()\n            print(res_json)\n    \n            # 3. 获取实际结果并断言\n            actual_result = self.ak.get_value(res_json, case_data[\"actualResult\"])\n            print(f\"actual_result: {actual_result}\")\n>           assert actual_result == case_data[\"expectResult\"], \\\n                f\"断言失败: 预期[{case_data['expectResult']}], 实际: [{actual_result}]\"\nE               AssertionError: 断言失败: 预期[SUCCESS], 实际: [已发布过同名小说！]\nE               assert '已发布过同名小说！' == 'SUCCESS'\nE                 \nE                 - SUCCESS\nE                 + 已发布过同名小说！\n\ntest_case\\test_case_002.py:141: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_case.test_case_002.TestCase object at 0x000001A92A7F9A90>\ncase_data = {'id': 21, 'url': 'http://novel.hctestedu.com', 'path': '/author/addBook', 'method': 'post', ...}\n\n    @pytest.mark.parametrize(\"case_data\", CaseData)\n    def testcase(self, case_data: Dict[str, Any]):\n        self.__dynamic_title(case_data)\n        case_data = eval(Template(str(case_data)).render(self.all_dict))\n    \n        test_result = \"Passed\"  # 默认状态\n        error_msg = None\n    \n        try:\n    \n            # 1. 准备请求数据\n            dict_data = self.__prepare_request_data(case_data)\n            print(dict_data)\n            # 2. 发送请求\n            res = getattr(self.ak, case_data[\"method\"])(**dict_data)\n            res_json = res.json()\n            print(res_json)\n    \n            # 3. 获取实际结果并断言\n            actual_result = self.ak.get_value(res_json, case_data[\"actualResult\"])\n            print(f\"actual_result: {actual_result}\")\n            assert actual_result == case_data[\"expectResult\"], \\\n                f\"断言失败: 预期[{case_data['expectResult']}], 实际: [{actual_result}]\"\n            self.__json_extraction(case_data, res_json)\n            self.__sql_assert(case_data)\n    \n            if case_data[\"responseExpect\"]:\n                deepdiff_expect_data = self.__safe_json_parse(case_data.get(\"responseExpect\"))\n                other = eval(case_data[\"responseExclude\"])\n                print(f\"得到的responseExclude: {other}\")\n                jsonMaxDataRes = self.ak.data_deepdiff(deepdiff_expect_data, res_json, **other)\n                assert  jsonMaxDataRes, \"大量数据响应断言失败，两者数据不一致\"\n    \n        except AssertionError as ae:\n            # 断言失败的专属处理\n            test_result = \"Failed\"\n            error_msg = str(ae)\n>           pytest.fail(error_msg)  # 标记测试失败\n            ^^^^^^^^^^^^^^^^^^^^^^\nE           Failed: 断言失败: 预期[SUCCESS], 实际: [已发布过同名小说！]\nE           assert '已发布过同名小说！' == 'SUCCESS'\nE             \nE             - SUCCESS\nE             + 已发布过同名小说！\n\ntest_case\\test_case_002.py:157: Failed"}, "description": "添加书籍", "steps": [{"name": "发送post请求", "status": "passed", "parameters": [{"name": "url", "value": "'http://novel.hctestedu.com/author/addBook'"}, {"name": "data", "value": "{'workDirection': '0', 'catId': '1', 'catName': '432432432432', 'bookDesc': '测试数据423432432', 'picUrl': '/images/default.gif', 'bookName': '35435435'}"}, {"name": "json", "value": "None"}, {"name": "params", "value": "{}"}, {"name": "headers", "value": "{'Authorization': 'eyJhbGciOiJIUzUxMiJ9.eyJleHAiOjE3NTY3MDYyNTAsInN1YiI6IntcImlkXCI6MTYyODc0MDY3ODY3MDE5NjczNixcInVzZXJuYW1lXCI6XCIxNTA5NjI2MTExMFwiLFwibmlja05hbWVcIjpcIlMxNTA5NjI2MTExMFwifSIsImNyZWF0ZWQiOjE3NTYxMDE0NTAyOTN9.4K6MkkMRaWzFX3c1vqOjHltBsPhsWwHxTSYM76cIcV_93RA-Zks5xSL4lmfPn_EwxnH_A05wHLmHjjbDuksdsQ'}"}], "start": 1756101450740, "stop": 1756101450801}, {"name": "jsonpath提取数据", "status": "passed", "parameters": [{"name": "data", "value": "{'code': '4003', 'msg': '已发布过同名小说！', 'data': None}"}, {"name": "key", "value": "'$.msg'"}], "start": 1756101450801, "stop": 1756101450801}], "attachments": [{"name": "log", "source": "2291e572-9a73-4dcd-b439-1a142ba33f8a-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "7951a1e1-dd39-4ee6-9b33-a16eda82f4db-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case_data", "value": "{'id': 21, 'url': 'http://novel.hctestedu.com', 'path': '/author/addBook', 'method': 'post', 'params': None, 'headers': '{\"Authorization\":  \"{{DSW_TOKEN}}\"}', 'data': '{\"workDirection\": \"0\",\\n \"catId\": \"1\",\\n \"catName\": \"432432432432\",\\n \"bookDesc\": \"测试数据423432432\",\\n \"picUrl\": \"/images/default.gif\",\\n \"bookName\": \"35435435\"}', 'type': 'data', 'actualResult': '$.msg', 'expectResult': 'SUCCESS', 'result': \"Failed: 断言失败: 预期[SUCCESS], 实际: [已发布过同名小说！]\\nassert '已发布过同名小说！' == 'SUCCESS'\\n  \\n  - SUCCESS\\n  + 已发布过同名小说！\", 'caseName': '添加书籍，正确提交', 'jsonExData': None, 'sqlExData': None, 'regularExData': None, 'storyName': 'F01S02_添加书籍', 'featureName': 'F05_读书屋项目', 'remark': '添加书籍', 'rank': 'blocker', 'sqlAssertData': None, 'sqlExpectResult': None, 'responseExpect': None, 'responseExclude': None, 'is_true': True, None: None}"}], "start": 1756101450739, "stop": 1756101450829, "uuid": "15a7e7d7-e526-4b79-899c-92816743b2b9", "historyId": "a4b310dce851322fae4a1ca4932235ca", "testCaseId": "418d268ce69e160b0573de682d1350f4", "fullName": "test_case.test_case_002.TestCase#testcase", "labels": [{"name": "story", "value": "F01S02_添加书籍"}, {"name": "feature", "value": "F05_读书屋项目"}, {"name": "severity", "value": "blocker"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_case_002"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "DESKTOP-CQ0OVRO"}, {"name": "thread", "value": "2792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_case_002"}], "titlePath": ["test_case", "test_case_002.py", "TestCase"]}